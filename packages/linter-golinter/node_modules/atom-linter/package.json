{
  "_args": [
    [
      {
        "raw": "atom-linter@^9.0.0",
        "scope": null,
        "escapedName": "atom-linter",
        "name": "atom-linter",
        "rawSpec": "^9.0.0",
        "spec": ">=9.0.0 <10.0.0",
        "type": "range"
      },
      "/tmp/d-117427-14624-muybi1.jq0duc8fr/package.tgz"
    ]
  ],
  "_from": "atom-linter@>=9.0.0 <10.0.0",
  "_id": "atom-linter@9.0.1",
  "_inCache": true,
  "_location": "/linter-golinter/atom-linter",
  "_nodeVersion": "7.6.0",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/atom-linter-9.0.1.tgz_1488391149167_0.6117213862016797"
  },
  "_npmUser": {
    "name": "steelbrain",
    "email": "i@steelbrain.me"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "atom-linter@^9.0.0",
    "scope": null,
    "escapedName": "atom-linter",
    "name": "atom-linter",
    "rawSpec": "^9.0.0",
    "spec": ">=9.0.0 <10.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/linter-golinter"
  ],
  "_resolved": "https://registry.npmjs.org/atom-linter/-/atom-linter-9.0.1.tgz",
  "_shasum": "8fa9bea01fd6a3f8d53ae2251d7b2a1c86f0b88d",
  "_shrinkwrap": null,
  "_spec": "atom-linter@^9.0.0",
  "_where": "/tmp/d-117427-14624-muybi1.jq0duc8fr/package.tgz",
  "author": {
    "name": "steelbrain"
  },
  "bugs": {
    "url": "https://github.com/steelbrain/atom-linter/issues"
  },
  "dependencies": {
    "named-js-regexp": "^1.3.1",
    "sb-exec": "^3.1.0",
    "sb-promisify": "^2.0.1",
    "tmp": "~0.0.28"
  },
  "description": "Helper module for atom linter providers",
  "devDependencies": {
    "babel-cli": "^6.10.1",
    "babel-preset-steelbrain": "^4.0.1",
    "eslint-config-steelbrain": "^1.0.4",
    "flow-bin": "^0.31.1",
    "jasmine-fix": "^1.0.1",
    "rimraf": "^2.5.4"
  },
  "directories": {},
  "dist": {
    "shasum": "8fa9bea01fd6a3f8d53ae2251d7b2a1c86f0b88d",
    "tarball": "https://registry.npmjs.org/atom-linter/-/atom-linter-9.0.1.tgz"
  },
  "gitHead": "b6628dd9b8dc98f87a4e249652a42fed21143bd7",
  "homepage": "https://github.com/steelbrain/atom-linter#readme",
  "keywords": [
    "atom",
    "linter"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "arcanemagus",
      "email": "landonabney@gmail.com"
    },
    {
      "name": "steelbrain",
      "email": "fakedemail@email.com"
    }
  ],
  "name": "atom-linter",
  "optionalDependencies": {},
  "readme": "atom-linter\n===========\n\natom-linter is an npm helper module that you can import in your Linter Providers\nand make things easier for yourself.\n\n#### API\n\nFor full documentation of `exec` and `execNode` API, please refer to [`sb-exec README`](https://github.com/steelbrain/exec/blob/master/README.md)\n\n```js\nexport const FindCache: Map\nexport function exec(command: String, args: Array<string> = [], options: Object): Promise\nexport function execNode(filePath: String, args: Array<string> = [], options: Object): Promise\nexport function parse(data: String, regex: String, options: Object = {flags: 'g'}): Array<Linter$Message>\nexport function generateRange(textEditor: TextEditor, lineNumber: Number = 0, colStart: Number = <firstTextColumn>): Array\nexport function find(directory: String, names: String | Array<string>): ?String\nexport function findCached(directory: String, names: String | Array<string>): ?String\nexport function findAsync(directory: String, names: String | Array<string>): Promise<?String>\nexport function findCachedAsync(directory: String, names: String | Array<string>): Promise<?String>\nexport function tempFile<T>(fileName: String, fileContents: String, callback: Function<T>): Promise<T>\nexport function tempFiles<T>(filesNames: Array<{ name: String, contents: String }>, callback: Function<T>): Promise<T>\n```\n\n#### License\n\nThis project is licensed under the terms of MIT License, see the LICENSE file for more info\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/steelbrain/atom-linter.git"
  },
  "scripts": {
    "clean": "rimraf lib",
    "compile": "npm run clean && babel src --out-dir lib",
    "lint": "(flow check) && (eslint .)",
    "test": "apm test",
    "watch": "npm run clean && babel src --out-dir lib --watch"
  },
  "version": "9.0.1"
}
