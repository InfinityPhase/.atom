(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("fs-plus"), require("path"), require("request"), require("tmp"), require("cross-spawn"), require("sockjs-client"), require("jsonrpc-lite"), require("querystringify"), require("tcp-port-used"), require("tar"), require("zlib"), require("semver"));
	else if(typeof define === 'function' && define.amd)
		define("platformio-node-helpers", ["fs-plus", "path", "request", "tmp", "cross-spawn", "sockjs-client", "jsonrpc-lite", "querystringify", "tcp-port-used", "tar", "zlib", "semver"], factory);
	else if(typeof exports === 'object')
		exports["platformio-node-helpers"] = factory(require("fs-plus"), require("path"), require("request"), require("tmp"), require("cross-spawn"), require("sockjs-client"), require("jsonrpc-lite"), require("querystringify"), require("tcp-port-used"), require("tar"), require("zlib"), require("semver"));
	else
		root["platformio-node-helpers"] = factory(root["fs-plus"], root["path"], root["request"], root["tmp"], root["cross-spawn"], root["sockjs-client"], root["jsonrpc-lite"], root["querystringify"], root["tcp-port-used"], root["tar"], root["zlib"], root["semver"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_0__, __WEBPACK_EXTERNAL_MODULE_2__, __WEBPACK_EXTERNAL_MODULE_5__, __WEBPACK_EXTERNAL_MODULE_6__, __WEBPACK_EXTERNAL_MODULE_11__, __WEBPACK_EXTERNAL_MODULE_13__, __WEBPACK_EXTERNAL_MODULE_14__, __WEBPACK_EXTERNAL_MODULE_15__, __WEBPACK_EXTERNAL_MODULE_16__, __WEBPACK_EXTERNAL_MODULE_19__, __WEBPACK_EXTERNAL_MODULE_20__, __WEBPACK_EXTERNAL_MODULE_21__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 8);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_0__;

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getHomeDir = getHomeDir;
exports.getEnvDir = getEnvDir;
exports.getEnvBinDir = getEnvBinDir;
exports.getCacheDir = getCacheDir;
exports.getVersion = getVersion;
exports.runPIOCommand = runPIOCommand;

var _fsPlus = __webpack_require__(0);

var _fsPlus2 = _interopRequireDefault(_fsPlus);

var _path = __webpack_require__(2);

var _path2 = _interopRequireDefault(_path);

var _misc = __webpack_require__(3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } } /**
                                                                                                                                                                                                     * Copyright (c) 2017-present PlatformIO <contact@platformio.org>
                                                                                                                                                                                                     * All rights reserved.
                                                                                                                                                                                                     *
                                                                                                                                                                                                     * This source code is licensed under the license found in the LICENSE file in
                                                                                                                                                                                                     * the root directory of this source tree.
                                                                                                                                                                                                     */

var IS_WINDOWS = process.platform.startsWith('win');

function getHomeDir() {
  var userHomeDir = IS_WINDOWS && !process.env.HOME ? process.env.USERPROFILE : process.env.HOME;
  var result = process.env.PLATFORMIO_HOME_DIR || _path2.default.join(userHomeDir || '~', '.platformio');
  if (IS_WINDOWS) {
    // Make sure that all path characters have valid ASCII codes.
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = result[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var char = _step.value;

        if (char.charCodeAt(0) > 127) {
          // If they don't, put the pio home directory into the root of the disk.
          var homeDirPathFormat = _path2.default.parse(result);
          return _path2.default.format({
            root: homeDirPathFormat.root,
            dir: homeDirPathFormat.root,
            base: '.platformio',
            name: '.platformio'
          });
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }
  }
  return result;
}

function getEnvDir() {
  return _path2.default.join(getHomeDir(), 'penv');
}

function getEnvBinDir() {
  return _path2.default.join(getEnvDir(), IS_WINDOWS ? 'Scripts' : 'bin');
}

function getCacheDir() {
  var dir = _path2.default.join(getHomeDir(), '.cache');
  if (!_fsPlus2.default.isDirectorySync(dir)) {
    _fsPlus2.default.makeTreeSync(dir);
  }
  return dir;
}

function getVersion() {
  return new Promise(function (resolve, reject) {
    (0, _misc.runCommand)('platformio', ['--version'], function (code, stdout, stderr) {
      if (code === 0) {
        try {
          return resolve(stdout.trim().match(/[\d+\.]+.*$/)[0]);
        } catch (err) {
          return reject(err.toString());
        }
      }
      return reject(stderr);
    });
  });
}

function runPIOCommand(args, callback) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var baseArgs = ['-f'];
  if (process.env.PLATFORMIO_CALLER) {
    baseArgs.push('-c');
    baseArgs.push(process.env.PLATFORMIO_CALLER);
  }
  (0, _misc.runCommand)('platformio', [].concat(baseArgs, _toConsumableArray(args)), callback, options);
}

/***/ }),
/* 2 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_2__;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPythonExecutable = undefined;

var _regenerator = __webpack_require__(4);

var _regenerator2 = _interopRequireDefault(_regenerator);

var getPythonExecutable = exports.getPythonExecutable = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
    var useBuiltinPIOCore = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
    var customDirs = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

    var candidates, defaultName, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, item, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, executable;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            candidates = new Set();
            defaultName = IS_WINDOWS ? 'python.exe' : 'python';


            if (customDirs) {
              customDirs.forEach(function (dir) {
                return candidates.add(_path2.default.join(dir, defaultName));
              });
            }

            if (useBuiltinPIOCore) {
              candidates.add(_path2.default.join((0, _core.getEnvBinDir)(), defaultName));
              if (_fsPlus2.default.isFileSync(_path2.default.join((0, _core.getEnvDir)(), defaultName))) {
                candidates.add(_path2.default.join((0, _core.getEnvDir)(), defaultName)); // conda
              }
            }

            if (IS_WINDOWS) {
              candidates.add(defaultName);
              candidates.add('C:\\Python27\\' + defaultName);
            } else {
              candidates.add('python2.7');
              candidates.add(defaultName);
            }

            _iteratorNormalCompletion = true;
            _didIteratorError = false;
            _iteratorError = undefined;
            _context.prev = 8;
            for (_iterator = process.env.PATH.split(_path2.default.delimiter)[Symbol.iterator](); !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              item = _step.value;

              if (_fsPlus2.default.isFileSync(_path2.default.join(item, defaultName))) {
                candidates.add(_path2.default.join(item, defaultName));
              }
            }

            _context.next = 16;
            break;

          case 12:
            _context.prev = 12;
            _context.t0 = _context['catch'](8);
            _didIteratorError = true;
            _iteratorError = _context.t0;

          case 16:
            _context.prev = 16;
            _context.prev = 17;

            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }

          case 19:
            _context.prev = 19;

            if (!_didIteratorError) {
              _context.next = 22;
              break;
            }

            throw _iteratorError;

          case 22:
            return _context.finish(19);

          case 23:
            return _context.finish(16);

          case 24:
            _iteratorNormalCompletion2 = true;
            _didIteratorError2 = false;
            _iteratorError2 = undefined;
            _context.prev = 27;
            _iterator2 = candidates.values()[Symbol.iterator]();

          case 29:
            if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {
              _context.next = 38;
              break;
            }

            executable = _step2.value;
            _context.next = 33;
            return isPython2(executable);

          case 33:
            if (!_context.sent) {
              _context.next = 35;
              break;
            }

            return _context.abrupt('return', executable);

          case 35:
            _iteratorNormalCompletion2 = true;
            _context.next = 29;
            break;

          case 38:
            _context.next = 44;
            break;

          case 40:
            _context.prev = 40;
            _context.t1 = _context['catch'](27);
            _didIteratorError2 = true;
            _iteratorError2 = _context.t1;

          case 44:
            _context.prev = 44;
            _context.prev = 45;

            if (!_iteratorNormalCompletion2 && _iterator2.return) {
              _iterator2.return();
            }

          case 47:
            _context.prev = 47;

            if (!_didIteratorError2) {
              _context.next = 50;
              break;
            }

            throw _iteratorError2;

          case 50:
            return _context.finish(47);

          case 51:
            return _context.finish(44);

          case 52:
            return _context.abrupt('return', null);

          case 53:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[8, 12, 16, 24], [17,, 19, 23], [27, 40, 44, 52], [45,, 47, 51]]);
  }));

  return function getPythonExecutable() {
    return _ref2.apply(this, arguments);
  };
}();

exports.patchOSEnviron = patchOSEnviron;
exports.runCommand = runCommand;
exports.processHTTPRequest = processHTTPRequest;

var _core = __webpack_require__(1);

var _fsPlus = __webpack_require__(0);

var _fsPlus2 = _interopRequireDefault(_fsPlus);

var _path = __webpack_require__(2);

var _path2 = _interopRequireDefault(_path);

var _request = __webpack_require__(5);

var _request2 = _interopRequireDefault(_request);

var _crossSpawn = __webpack_require__(11);

var _crossSpawn2 = _interopRequireDefault(_crossSpawn);

var _tmp = __webpack_require__(6);

var _tmp2 = _interopRequireDefault(_tmp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright (c) 2017-present PlatformIO <contact@platformio.org>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * This source code is licensed under the license found in the LICENSE file in
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */

var IS_WINDOWS = process.platform.startsWith('win');

function patchOSEnviron(_ref) {
  var caller = _ref.caller,
      _ref$useBuiltinPIOCor = _ref.useBuiltinPIOCore,
      useBuiltinPIOCore = _ref$useBuiltinPIOCor === undefined ? true : _ref$useBuiltinPIOCor,
      extraPath = _ref.extraPath,
      extraVars = _ref.extraVars;

  process.env.PLATFORMIO_CALLER = caller;
  // Fix for platformio-atom-ide/issues/112
  if (process.platform === 'darwin') {
    process.env.LC_ALL = 'en_US.UTF-8';
  }
  if (caller === 'atom') {
    process.env.PLATFORMIO_DISABLE_PROGRESSBAR = 'true';
  }

  if (extraVars) {
    Object.keys(extraVars).forEach(function (name) {
      return process.env[name] = extraVars[name];
    });
  }

  // Fix for https://github.com/atom/atom/issues/11302
  if (process.env.Path) {
    if (process.env.PATH) {
      process.env.PATH += _path2.default.delimiter + process.env.Path;
    } else {
      process.env.PATH = process.env.Path;
    }
  }

  if (useBuiltinPIOCore) {
    // Insert bin directory into PATH
    process.env.PATH = [(0, _core.getEnvBinDir)(), (0, _core.getEnvDir)(), process.env.PATH].join(_path2.default.delimiter);
  } else {
    // Remove bin directory from PATH
    process.env.PATH = process.env.PATH.split(_path2.default.delimiter).filter(function (p) {
      return !p.includes((0, _core.getEnvDir)());
    }).join(_path2.default.delimiter);
  }

  if (extraPath && !process.env.PATH.includes(extraPath)) {
    process.env.PATH = [extraPath, process.env.PATH].join(_path2.default.delimiter);
  }

  // copy PATH to Path (Windows issue)
  if (process.env.Path) {
    process.env.Path = process.env.PATH;
  }
}

function runCommand(cmd, args) {
  var callback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : undefined;
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

  console.info('runCommand', cmd, args, options);
  var outputLines = [];
  var errorLines = [];
  var completed = false;
  var tmpDir = null;

  if (IS_WINDOWS && ['pip', 'virtualenv'].includes(_path2.default.basename(cmd))) {
    // Overwrite TMPDIR and avoid issue with ASCII error for Python's PIP
    var tmpEnv = Object.assign({}, process.env);
    tmpDir = _tmp2.default.dirSync({
      dir: (0, _core.getCacheDir)(),
      unsafeCleanup: true
    }).name;
    tmpEnv.TMPDIR = tmpEnv.TEMP = tmpEnv.TMP = tmpDir;
    options.spawnOptions = options.spawnOptions || {};
    options.spawnOptions.env = tmpEnv;
  }

  try {
    var child = (0, _crossSpawn2.default)(cmd, args, options.spawnOptions);

    child.stdout.on('data', function (line) {
      return outputLines.push(line);
    });
    child.stderr.on('data', function (line) {
      return errorLines.push(line);
    });
    child.on('close', onExit);
    child.on('error', function (err) {
      errorLines.push(err.toString());
      onExit(-1);
    });
  } catch (err) {
    errorLines.push(err.toString());
    onExit(-1);
  }

  function onExit(code) {
    if (completed || !callback) {
      return;
    }
    completed = true;

    if (tmpDir) {
      try {
        _fsPlus2.default.removeSync(tmpDir);
      } catch (err) {
        console.error(err);
      }
    }

    var stdout = outputLines.map(function (x) {
      return x.toString();
    }).join('');
    var stderr = errorLines.map(function (x) {
      return x.toString();
    }).join('');
    callback(code, stdout, stderr);
  }
}

function processHTTPRequest(url, callback, options) {
  options = options || {};
  options.url = url;
  if (!options.hasOwnProperty('headers')) {
    options.headers = {
      'User-Agent': 'PlatformIO'
    };
  }
  console.info('processHTTPRequest', options);
  return (0, _request2.default)(options, function (err, response, body) {
    return callback(err, response, body);
  });
}

function isPython2(executable) {
  var pythonLines = ['import platform', 'import sys', 'assert "cygwin" not in platform.system().lower()', 'assert "msys" not in sys.executable.lower()', 'assert sys.version_info < (3, 0, 0)'];
  if (IS_WINDOWS) {
    pythonLines.push('assert sys.version_info >= (2, 7, 9)');
  } else {
    pythonLines.push('assert sys.version_info >= (2, 7, 5)');
  }
  var args = ['-c', pythonLines.join(';')];
  return new Promise(function (resolve) {
    runCommand(executable, args, function (code) {
      resolve(code === 0);
    });
  });
}

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(9);


/***/ }),
/* 5 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_5__;

/***/ }),
/* 6 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_6__;

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * Copyright (c) 2017-present PlatformIO <contact@platformio.org>
 * All rights reserved.
 *
 * This source code is licensed under the license found in the LICENSE file in
 * the root directory of this source tree.
 */

var BaseStage = function () {
  function BaseStage(stateStorage, onStatusChange) {
    var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, BaseStage);

    this.stateStorage = stateStorage;
    this.onStatusChange = onStatusChange;
    this.params = params;

    this._status = BaseStage.STATUS_CHECKING;
  }

  _createClass(BaseStage, [{
    key: 'check',
    value: function check() {
      throw new Error('Stage must implement a `check` method');
    }
  }, {
    key: 'install',
    value: function install() {
      throw new Error('Stage must implement an `install` method');
    }
  }, {
    key: 'destroy',
    value: function destroy() {}
  }, {
    key: 'name',
    get: function get() {
      return 'Stage';
    }
  }, {
    key: 'status',
    get: function get() {
      return this._status;
    },
    set: function set(status) {
      this._status = status;
      this.onStatusChange();
    }
  }, {
    key: 'stateKey',
    get: function get() {
      return this.constructor.name;
    }
  }, {
    key: 'state',
    get: function get() {
      return this.stateStorage.getValue(this.stateKey);
    },
    set: function set(value) {
      this.stateStorage.setValue(this.stateKey, value);
    }
  }]);

  return BaseStage;
}();

BaseStage.STATUS_CHECKING = 0;
BaseStage.STATUS_INSTALLING = 1;
BaseStage.STATUS_SUCCESSED = 2;
BaseStage.STATUS_FAILED = 3;
exports.default = BaseStage;
module.exports = exports['default'];

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.misc = exports.installer = exports.home = exports.core = undefined;

var _core = __webpack_require__(1);

var core = _interopRequireWildcard(_core);

var _home = __webpack_require__(12);

var home = _interopRequireWildcard(_home);

var _misc = __webpack_require__(3);

var misc = _interopRequireWildcard(_misc);

var _base = __webpack_require__(7);

var _base2 = _interopRequireDefault(_base);

var _platformioCore = __webpack_require__(17);

var _platformioCore2 = _interopRequireDefault(_platformioCore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var installer = {
  BaseStage: _base2.default,
  PlatformIOCoreStage: _platformioCore2.default
}; /**
    * Copyright (c) 2017-present PlatformIO <contact@platformio.org>
    * All rights reserved.
    *
    * This source code is licensed under the license found in the LICENSE file in
    * the root directory of this source tree.
    */

exports.core = core;
exports.home = home;
exports.installer = installer;
exports.misc = misc;

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() { return this })() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

module.exports = __webpack_require__(10);

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}


/***/ }),
/* 10 */
/***/ (function(module, exports) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() { return this })() || Function("return this")()
);


/***/ }),
/* 11 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_11__;

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ensureServerStarted = undefined;

var _regenerator = __webpack_require__(4);

var _regenerator2 = _interopRequireDefault(_regenerator);

var findFreePort = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
    var port, inUse;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            port = 8010;
            inUse = false;

          case 2:
            if (!(port < 9000)) {
              _context.next = 11;
              break;
            }

            _context.next = 5;
            return new Promise(function (resolve) {
              _tcpPortUsed2.default.check(port, HTTP_HOST).then(function (inUse) {
                resolve(inUse);
              }, function () {
                return resolve(false);
              });
            });

          case 5:
            inUse = _context.sent;

            if (inUse) {
              _context.next = 8;
              break;
            }

            return _context.abrupt('return', port);

          case 8:
            port++;
            _context.next = 2;
            break;

          case 11:
            return _context.abrupt('return', 0);

          case 12:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function findFreePort() {
    return _ref.apply(this, arguments);
  };
}();

var ensureServerStarted = exports.ensureServerStarted = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee2(options) {
    var params;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            if (!(HTTP_PORT === 0)) {
              _context2.next = 4;
              break;
            }

            _context2.next = 3;
            return findFreePort();

          case 3:
            HTTP_PORT = _context2.sent;

          case 4:
            params = {
              host: HTTP_HOST,
              port: HTTP_PORT
            };
            _context2.next = 7;
            return isServerStarted();

          case 7:
            if (!_context2.sent) {
              _context2.next = 9;
              break;
            }

            return _context2.abrupt('return', params);

          case 9:

            (0, _core.runPIOCommand)(['home', '--port', HTTP_PORT, '--no-open'], function (code, stdout, stderr) {
              if (code !== 0) {
                throw new Error('Could not start PIO Home server: ' + stderr.toString());
              }
            });

            _context2.next = 12;
            return new Promise(function (resolve, reject) {
              _tcpPortUsed2.default.waitUntilUsed(HTTP_PORT, 500, SERVER_LAUNCH_TIMEOUT * 1000).then(function () {
                resolve(true);
              }, function (err) {
                reject('Could not start PIO Home server: ' + err.toString());
              });
            });

          case 12:
            if (options.onIDECommand) {
              listenIDECommands(options.onIDECommand);
            }
            return _context2.abrupt('return', params);

          case 14:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function ensureServerStarted(_x) {
    return _ref2.apply(this, arguments);
  };
}();

exports.isServerStarted = isServerStarted;
exports.shutdownServer = shutdownServer;
exports.loadState = loadState;
exports.showAtStartup = showAtStartup;
exports.getFrontendUri = getFrontendUri;

var _core = __webpack_require__(1);

var _sockjsClient = __webpack_require__(13);

var _sockjsClient2 = _interopRequireDefault(_sockjsClient);

var _fsPlus = __webpack_require__(0);

var _fsPlus2 = _interopRequireDefault(_fsPlus);

var _jsonrpcLite = __webpack_require__(14);

var _jsonrpcLite2 = _interopRequireDefault(_jsonrpcLite);

var _path = __webpack_require__(2);

var _path2 = _interopRequireDefault(_path);

var _querystringify = __webpack_require__(15);

var _querystringify2 = _interopRequireDefault(_querystringify);

var _request = __webpack_require__(5);

var _request2 = _interopRequireDefault(_request);

var _tcpPortUsed = __webpack_require__(16);

var _tcpPortUsed2 = _interopRequireDefault(_tcpPortUsed);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright (c) 2017-present PlatformIO <contact@platformio.org>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * This source code is licensed under the license found in the LICENSE file in
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */

var SERVER_LAUNCH_TIMEOUT = 5 * 60; // 5 minutes
var HTTP_HOST = '127.0.0.1';
var HTTP_PORT = 0;

function listenIDECommands(callback) {
  var reconnect = {
    timer: null,
    delay: 500, // msec
    maxDelay: 10000, // msec
    retries: 0
  };

  function newSocket(endpoint) {
    if (reconnect.timer) {
      clearTimeout(reconnect.timer);
    }
    var sock = new _sockjsClient2.default(endpoint);

    sock.onopen = function () {
      reconnect.retries = 0;
      sock.send(_jsonrpcLite2.default.request(Math.random().toString(), 'ide.listen_commands').toString());
    };

    sock.onclose = function () {
      // reconnect.retries++;
      // reconnect.interval = setTimeout(
      //   () => newSocket(endpoint),
      //   Math.min(reconnect.delay * reconnect.retries, reconnect.maxDelay)
      // );
    };

    sock.onmessage = function (event) {
      try {
        var result = _jsonrpcLite2.default.parse(event.data);
        switch (result.type) {
          case 'success':
            callback(result.payload.result.method, result.payload.result.params);
            break;

          case 'error':
            console.error('Errored result: ' + result.payload.toString());
            break;
        }
      } catch (err) {
        console.error('Invalid RPC message: ' + err.toString());
      }
      sock.send(_jsonrpcLite2.default.request(Math.random().toString(), 'ide.listen_commands').toString());
    };
    return sock;
  }

  newSocket('http://' + HTTP_HOST + ':' + HTTP_PORT + '/wsrpc');
}

function isServerStarted() {
  return new Promise(function (resolve) {
    _tcpPortUsed2.default.check(HTTP_PORT, HTTP_HOST).then(function (inUse) {
      resolve(inUse);
    }, function () {
      return resolve(false);
    });
  });
}

function shutdownServer() {
  _request2.default.get('http://' + HTTP_HOST + ':' + HTTP_PORT + '?__shutdown__=1');
}

function loadState() {
  var statePath = _path2.default.join((0, _core.getHomeDir)(), 'homestate.json');
  if (!_fsPlus2.default.isFileSync(statePath)) {
    return null;
  }
  try {
    return JSON.parse(_fsPlus2.default.readFileSync(statePath, 'utf8'));
  } catch (err) {
    console.error(err);
    return null;
  }
}

function showAtStartup(caller) {
  var state = loadState();
  return !state || !state.storage || !state.storage.showOnStartup || !state.storage.showOnStartup.hasOwnProperty(caller) || state.storage.showOnStartup[caller];
}

function getFrontendUri(serverHost, serverPort, options) {
  var stateStorage = (loadState() || {}).storage || {};
  var params = {
    start: options.start || '/',
    theme: stateStorage.theme || options.theme,
    workspace: stateStorage.workspace || options.workspace
  };
  return 'http://' + serverHost + ':' + serverPort + '?' + _querystringify2.default.stringify(params);
}

/***/ }),
/* 13 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_13__;

/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_14__;

/***/ }),
/* 15 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_15__;

/***/ }),
/* 16 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_16__;

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = __webpack_require__(4);

var _regenerator2 = _interopRequireDefault(_regenerator);

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _core = __webpack_require__(1);

var core = _interopRequireWildcard(_core);

var _helpers = __webpack_require__(18);

var _misc = __webpack_require__(3);

var _base = __webpack_require__(7);

var _base2 = _interopRequireDefault(_base);

var _fsPlus = __webpack_require__(0);

var _fsPlus2 = _interopRequireDefault(_fsPlus);

var _path = __webpack_require__(2);

var _path2 = _interopRequireDefault(_path);

var _semver = __webpack_require__(21);

var _semver2 = _interopRequireDefault(_semver);

var _tmp = __webpack_require__(6);

var _tmp2 = _interopRequireDefault(_tmp);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * Copyright (c) 2017-present PlatformIO <contact@platformio.org>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * This source code is licensed under the license found in the LICENSE file in
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                * the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                */

var PlatformIOCoreStage = function (_BaseStage) {
  _inherits(PlatformIOCoreStage, _BaseStage);

  function PlatformIOCoreStage() {
    _classCallCheck(this, PlatformIOCoreStage);

    var _this = _possibleConstructorReturn(this, (PlatformIOCoreStage.__proto__ || Object.getPrototypeOf(PlatformIOCoreStage)).apply(this, arguments));

    _tmp2.default.setGracefulCleanup();
    return _this;
  } // 3 days

  _createClass(PlatformIOCoreStage, [{
    key: 'whereIsPython',
    value: function () {
      var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var status, pythonExecutable, result;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                status = this.params.pythonPrompt.STATUS_TRY_AGAIN;

              case 1:
                _context.next = 3;
                return (0, _misc.getPythonExecutable)(this.params.useBuiltinPIOCore);

              case 3:
                pythonExecutable = _context.sent;

                if (!pythonExecutable) {
                  _context.next = 6;
                  break;
                }

                return _context.abrupt('return', pythonExecutable);

              case 6:
                if (!process.platform.startsWith('win')) {
                  _context.next = 16;
                  break;
                }

                _context.prev = 7;
                _context.next = 10;
                return this.installPythonForWindows();

              case 10:
                return _context.abrupt('return', _context.sent);

              case 13:
                _context.prev = 13;
                _context.t0 = _context['catch'](7);

                console.error(_context.t0);

              case 16:
                _context.next = 18;
                return this.params.pythonPrompt.prompt();

              case 18:
                result = _context.sent;

                status = result.status;

                if (!(status === this.params.pythonPrompt.STATUS_CUSTOMEXE)) {
                  _context.next = 22;
                  break;
                }

                return _context.abrupt('return', result.pythonExecutable);

              case 22:
                if (status !== this.params.pythonPrompt.STATUS_ABORT) {
                  _context.next = 1;
                  break;
                }

              case 23:
                return _context.abrupt('return', null);

              case 24:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[7, 13]]);
      }));

      function whereIsPython() {
        return _ref.apply(this, arguments);
      }

      return whereIsPython;
    }()
  }, {
    key: 'installPythonForWindows',
    value: function () {
      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee2() {
        var pythonArch, msiUrl, msiInstaller, targetDir, pythonPath;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                // https://www.python.org/ftp/python/2.7.14/python-2.7.14.msi
                // https://www.python.org/ftp/python/2.7.14/python-2.7.14.amd64.msi
                pythonArch = process.arch === 'x64' ? '.amd64' : '';
                msiUrl = 'https://www.python.org/ftp/python/' + PlatformIOCoreStage.pythonVersion + '/python-' + PlatformIOCoreStage.pythonVersion + pythonArch + '.msi';
                _context2.next = 4;
                return (0, _helpers.download)(msiUrl, _path2.default.join(core.getCacheDir(), _path2.default.basename(msiUrl)));

              case 4:
                msiInstaller = _context2.sent;
                targetDir = _path2.default.join(core.getHomeDir(), 'python27');
                pythonPath = _path2.default.join(targetDir, 'python.exe');

                if (_fsPlus2.default.isFileSync(pythonPath)) {
                  _context2.next = 18;
                  break;
                }

                _context2.prev = 8;
                _context2.next = 11;
                return this.installPythonFromWindowsMSI(msiInstaller, targetDir);

              case 11:
                _context2.next = 18;
                break;

              case 13:
                _context2.prev = 13;
                _context2.t0 = _context2['catch'](8);

                console.error(_context2.t0);
                _context2.next = 18;
                return this.installPythonFromWindowsMSI(msiInstaller, targetDir, true);

              case 18:

                // append temporary to system environment
                process.env.PATH = [targetDir, _path2.default.join(targetDir, 'Scripts'), process.env.PATH].join(_path2.default.delimiter);
                process.env.Path = process.env.PATH;

                // install virtualenv
                return _context2.abrupt('return', new Promise(function (resolve) {
                  (0, _misc.runCommand)('pip', ['install', 'virtualenv'], function () {
                    return resolve(pythonPath);
                  });
                }));

              case 21:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this, [[8, 13]]);
      }));

      function installPythonForWindows() {
        return _ref2.apply(this, arguments);
      }

      return installPythonForWindows;
    }()
  }, {
    key: 'installPythonFromWindowsMSI',
    value: function () {
      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee3(msiInstaller, targetDir) {
        var administrative = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var logFile;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                logFile = _path2.default.join(core.getCacheDir(), 'python27msi.log');
                _context3.next = 3;
                return new Promise(function (resolve, reject) {
                  (0, _misc.runCommand)('msiexec.exe', [administrative ? '/a' : '/i', '"' + msiInstaller + '"', '/qn', '/li', '"' + logFile + '"', 'TARGETDIR="' + targetDir + '"'], function (code, stdout, stderr) {
                    if (code === 0) {
                      return resolve(stdout);
                    } else {
                      if (_fsPlus2.default.isFileSync(logFile)) {
                        stderr = _fsPlus2.default.readFileSync(logFile).toString();
                      }
                      return reject('MSI Python2.7: ' + stderr);
                    }
                  }, {
                    spawnOptions: {
                      shell: true
                    }
                  });
                });

              case 3:
                if (_fsPlus2.default.isFileSync(_path2.default.join(targetDir, 'python.exe'))) {
                  _context3.next = 5;
                  break;
                }

                throw new Error('Could not install Python 2.7 using MSI');

              case 5:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function installPythonFromWindowsMSI(_x, _x2) {
        return _ref3.apply(this, arguments);
      }

      return installPythonFromWindowsMSI;
    }()
  }, {
    key: 'cleanVirtualEnvDir',
    value: function cleanVirtualEnvDir() {
      var envDir = core.getEnvDir();
      if (!_fsPlus2.default.isDirectorySync(envDir)) {
        return true;
      }
      try {
        _fsPlus2.default.removeSync(envDir);
        return true;
      } catch (err) {
        console.error(err);
        return false;
      }
    }
  }, {
    key: 'isCondaInstalled',
    value: function isCondaInstalled() {
      return new Promise(function (resolve) {
        (0, _misc.runCommand)('conda', ['--version'], function (code) {
          return resolve(code === 0);
        });
      });
    }
  }, {
    key: 'createVirtualenvWithConda',
    value: function createVirtualenvWithConda() {
      return new Promise(function (resolve, reject) {
        (0, _misc.runCommand)('conda', ['create', '--yes', '--quiet', 'python=2', 'pip', '--prefix', core.getEnvDir()], function (code, stdout, stderr) {
          if (code === 0) {
            return resolve(stdout);
          } else {
            return reject('Conda Virtualenv: ' + stderr);
          }
        });
      });
    }
  }, {
    key: 'createVirtualenvWithUser',
    value: function createVirtualenvWithUser(pythonExecutable) {
      return new Promise(function (resolve, reject) {
        (0, _misc.runCommand)('virtualenv', ['-p', pythonExecutable, core.getEnvDir()], function (code, stdout, stderr) {
          if (code === 0) {
            return resolve(stdout);
          } else {
            return reject('User\'s Virtualenv: ' + stderr);
          }
        });
      });
    }
  }, {
    key: 'createVirtualenvWithDownload',
    value: function () {
      var _ref4 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee4(pythonExecutable) {
        var archivePath, tmpDir, dstDir, virtualenvScript;
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return (0, _helpers.download)(PlatformIOCoreStage.virtualenvUrl, _path2.default.join(core.getCacheDir(), 'virtualenv.tar.gz'));

              case 2:
                archivePath = _context4.sent;
                tmpDir = _tmp2.default.dirSync({
                  dir: core.getCacheDir(),
                  unsafeCleanup: true
                }).name;
                _context4.next = 6;
                return (0, _helpers.extractTarGz)(archivePath, tmpDir);

              case 6:
                dstDir = _context4.sent;
                virtualenvScript = _fsPlus2.default.listTreeSync(dstDir).find(function (item) {
                  return _path2.default.basename(item) === 'virtualenv.py';
                });

                if (virtualenvScript) {
                  _context4.next = 10;
                  break;
                }

                throw new Error('Can not find virtualenv.py script');

              case 10:
                return _context4.abrupt('return', new Promise(function (resolve, reject) {
                  (0, _misc.runCommand)(pythonExecutable, [virtualenvScript, core.getEnvDir()], function (code, stdout, stderr) {
                    try {
                      _fsPlus2.default.removeSync(tmpDir);
                    } catch (err) {
                      console.error(err);
                    }
                    if (code === 0) {
                      return resolve(stdout);
                    } else {
                      var userNotification = 'Virtualenv Create: ' + stderr;
                      if (stderr.includes('WindowsError: [Error 5]')) {
                        userNotification = 'If you use Antivirus, it can block PlatformIO Installer. Try to disable it for a while.\n\n' + userNotification;
                      }
                      return reject(userNotification);
                    }
                  });
                }));

              case 11:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function createVirtualenvWithDownload(_x4) {
        return _ref4.apply(this, arguments);
      }

      return createVirtualenvWithDownload;
    }()
  }, {
    key: 'installPIOCore',
    value: function () {
      var _ref5 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
        var cmd, args, pioCoreArchive;
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                cmd = 'pip';
                args = ['install', '--no-cache-dir', '-U'];

                if (!this.params.useDevelopmentPIOCore) {
                  _context5.next = 10;
                  break;
                }

                _context5.next = 5;
                return (0, _helpers.download)(PlatformIOCoreStage.pioCoreDevelopUrl, _path2.default.join(core.getCacheDir(), 'piocoredevelop.zip'));

              case 5:
                pioCoreArchive = _context5.sent;

                cmd = _path2.default.join(core.getEnvBinDir(), 'pip');
                args.push(pioCoreArchive);
                _context5.next = 11;
                break;

              case 10:
                args.push('platformio');

              case 11:
                _context5.prev = 11;
                _context5.next = 14;
                return new Promise(function (resolve, reject) {
                  (0, _misc.runCommand)(cmd, args, function (code, stdout, stderr) {
                    if (code === 0) {
                      resolve(stdout);
                    } else {
                      reject('PIP: ' + stderr);
                    }
                  });
                });

              case 14:
                _context5.next = 20;
                break;

              case 16:
                _context5.prev = 16;
                _context5.t0 = _context5['catch'](11);

                console.error(_context5.t0);
                // Old versions of PIP don't support `--no-cache-dir` option
                return _context5.abrupt('return', new Promise(function (resolve, reject) {
                  (0, _misc.runCommand)(cmd, args.filter(function (arg) {
                    return arg !== '--no-cache-dir';
                  }), function (code, stdout, stderr) {
                    if (code === 0) {
                      resolve(stdout);
                    } else {
                      reject('PIP: ' + stderr);
                    }
                  });
                }));

              case 20:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this, [[11, 16]]);
      }));

      function installPIOCore() {
        return _ref5.apply(this, arguments);
      }

      return installPIOCore;
    }()
  }, {
    key: 'installPIOHome',
    value: function installPIOHome() {
      return new Promise(function (resolve) {
        core.runPIOCommand(['home', '--host', '__do_not_start__'], function (code, stdout, stderr) {
          if (code !== 0) {
            console.error(stdout, stderr);
          }
          resolve(true);
        });
      });
    }
  }, {
    key: 'initState',
    value: function initState() {
      var state = this.state;
      if (!state || !state.hasOwnProperty('pioCoreChecked') || !state.hasOwnProperty('lastIDEVersion')) {
        state = {
          pioCoreChecked: 0,
          lastIDEVersion: null
        };
      }
      return state;
    }
  }, {
    key: 'autoUpgradePIOCore',
    value: function () {
      var _ref6 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee6(currentCoreVersion) {
        var _this2 = this;

        var newState, now;
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                newState = this.initState();
                now = new Date().getTime();

                if (!(process.env.PLATFORMIO_IDE && newState.lastIDEVersion && newState.lastIDEVersion !== process.env.PLATFORMIO_IDE || now - PlatformIOCoreStage.UPGRADE_PIOCORE_TIMEOUT > parseInt(newState.pioCoreChecked))) {
                  _context6.next = 8;
                  break;
                }

                newState.pioCoreChecked = now;
                // PIO Core
                _context6.next = 6;
                return new Promise(function (resolve) {
                  core.runPIOCommand(['upgrade'].concat(_toConsumableArray(_this2.params.useDevelopmentPIOCore && !_semver2.default.prerelease(currentCoreVersion) ? ['--dev'] : [])), function (code, stdout, stderr) {
                    if (code !== 0) {
                      console.error(stdout, stderr);
                    }
                    resolve(true);
                  });
                });

              case 6:
                _context6.next = 8;
                return new Promise(function (resolve) {
                  core.runPIOCommand(['update', '--core-packages'], function (code, stdout, stderr) {
                    if (code !== 0) {
                      console.error(stdout, stderr);
                    }
                    resolve(true);
                  });
                });

              case 8:
                newState.lastIDEVersion = process.env.PLATFORMIO_IDE;
                this.state = newState;

              case 10:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function autoUpgradePIOCore(_x5) {
        return _ref6.apply(this, arguments);
      }

      return autoUpgradePIOCore;
    }()
  }, {
    key: 'check',
    value: function () {
      var _ref7 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {
        var coreVersion;
        return _regenerator2.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                _context7.t0 = _helpers.PEPverToSemver;
                _context7.next = 3;
                return core.getVersion();

              case 3:
                _context7.t1 = _context7.sent;
                coreVersion = (0, _context7.t0)(_context7.t1);

                if (!this.params.useBuiltinPIOCore) {
                  _context7.next = 20;
                  break;
                }

                if (_fsPlus2.default.isDirectorySync(core.getEnvBinDir())) {
                  _context7.next = 10;
                  break;
                }

                throw new Error('Virtual environment is not created');

              case 10:
                if (!_semver2.default.lt(coreVersion, '3.5.0-rc.4')) {
                  _context7.next = 12;
                  break;
                }

                throw new Error('Force new python environment');

              case 12:
                _context7.prev = 12;
                _context7.next = 15;
                return this.autoUpgradePIOCore(coreVersion);

              case 15:
                _context7.next = 20;
                break;

              case 17:
                _context7.prev = 17;
                _context7.t2 = _context7['catch'](12);

                console.error(_context7.t2);

              case 20:
                if (!_semver2.default.lt(coreVersion, this.params.pioCoreMinVersion)) {
                  _context7.next = 25;
                  break;
                }

                this.params.setUseBuiltinPIOCore(true);
                this.params.useBuiltinPIOCore = true;
                this.params.useDevelopmentPIOCore = this.params.useDevelopmentPIOCore || _semver2.default.prerelease(this.params.pioCoreMinVersion);
                throw new Error('Incompatible PIO Core ' + coreVersion);

              case 25:

                this.status = _base2.default.STATUS_SUCCESSED;
                console.info('Found PIO Core ' + coreVersion);
                return _context7.abrupt('return', true);

              case 28:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this, [[12, 17]]);
      }));

      function check() {
        return _ref7.apply(this, arguments);
      }

      return check;
    }()
  }, {
    key: 'install',
    value: function () {
      var _ref8 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee8() {
        var pythonExecutable;
        return _regenerator2.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                if (!(this.status === _base2.default.STATUS_SUCCESSED)) {
                  _context8.next = 2;
                  break;
                }

                return _context8.abrupt('return', true);

              case 2:
                if (this.params.useBuiltinPIOCore) {
                  _context8.next = 5;
                  break;
                }

                this.status = _base2.default.STATUS_SUCCESSED;
                return _context8.abrupt('return', true);

              case 5:
                this.status = _base2.default.STATUS_INSTALLING;

                this.cleanVirtualEnvDir();

                _context8.next = 9;
                return this.isCondaInstalled();

              case 9:
                if (!_context8.sent) {
                  _context8.next = 14;
                  break;
                }

                _context8.next = 12;
                return this.createVirtualenvWithConda();

              case 12:
                _context8.next = 30;
                break;

              case 14:
                _context8.next = 16;
                return this.whereIsPython();

              case 16:
                pythonExecutable = _context8.sent;

                if (pythonExecutable) {
                  _context8.next = 20;
                  break;
                }

                this.status = _base2.default.STATUS_FAILED;
                throw new Error('Can not find Python Interpreter');

              case 20:
                _context8.prev = 20;
                _context8.next = 23;
                return this.createVirtualenvWithUser(pythonExecutable);

              case 23:
                _context8.next = 30;
                break;

              case 25:
                _context8.prev = 25;
                _context8.t0 = _context8['catch'](20);

                console.error(_context8.t0);
                _context8.next = 30;
                return this.createVirtualenvWithDownload(pythonExecutable);

              case 30:
                _context8.next = 32;
                return this.installPIOCore();

              case 32:
                _context8.next = 34;
                return this.installPIOHome();

              case 34:

                this.status = _base2.default.STATUS_SUCCESSED;
                return _context8.abrupt('return', true);

              case 36:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this, [[20, 25]]);
      }));

      function install() {
        return _ref8.apply(this, arguments);
      }

      return install;
    }()
  }, {
    key: 'name',
    get: function get() {
      return 'PlatformIO Core';
    }
  }]);

  return PlatformIOCoreStage;
}(_base2.default);

PlatformIOCoreStage.UPGRADE_PIOCORE_TIMEOUT = 86400 * 3 * 1000;
PlatformIOCoreStage.pythonVersion = '2.7.14';
PlatformIOCoreStage.virtualenvUrl = 'https://pypi.python.org/packages/source/v/virtualenv/virtualenv-14.0.6.tar.gz';
PlatformIOCoreStage.pioCoreDevelopUrl = 'https://github.com/platformio/platformio/archive/develop.zip';
exports.default = PlatformIOCoreStage;
module.exports = exports['default'];

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.download = undefined;

var _regenerator = __webpack_require__(4);

var _regenerator2 = _interopRequireDefault(_regenerator);

var download = exports.download = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee(source, target) {
    var retries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;
    var contentLength, lastError;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _context.next = 2;
            return getContentLength(source);

          case 2:
            contentLength = _context.sent;

            if (!fileExistsAndSizeMatches(target, contentLength)) {
              _context.next = 5;
              break;
            }

            return _context.abrupt('return', target);

          case 5:
            lastError = '';

          case 6:
            if (!(retries >= 0)) {
              _context.next = 21;
              break;
            }

            _context.prev = 7;
            _context.next = 10;
            return _download(source, target);

          case 10:
            if (!fileExistsAndSizeMatches(target, contentLength)) {
              _context.next = 12;
              break;
            }

            return _context.abrupt('return', target);

          case 12:
            _context.next = 18;
            break;

          case 14:
            _context.prev = 14;
            _context.t0 = _context['catch'](7);

            lastError = _context.t0;
            console.error(_context.t0);

          case 18:
            retries--;
            _context.next = 6;
            break;

          case 21:
            throw new Error('Failed to download file ' + source + ': ' + lastError);

          case 22:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this, [[7, 14]]);
  }));

  return function download(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var _download = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee2(source, target) {
    var proxy, apmPath;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            proxy = null;
            _context2.prev = 1;
            apmPath = atom.packages.getApmPath();
            _context2.next = 5;
            return new Promise(function (resolve, reject) {
              (0, _misc.runCommand)(apmPath, ['--no-color', 'config', 'get', 'https-proxy'], function (code, stdout) {
                if (code !== 0) {
                  return reject(null);
                }
                resolve(stdout.trim() === 'null' ? null : stdout.trim());
              });
            });

          case 5:
            proxy = _context2.sent;
            _context2.next = 11;
            break;

          case 8:
            _context2.prev = 8;
            _context2.t0 = _context2['catch'](1);

            proxy = process.env.HTTPS_PROXY && process.env.HTTPS_PROXY.trim() || process.env.HTTP_PROXY && process.env.HTTP_PROXY.trim();

          case 11:
            return _context2.abrupt('return', new Promise(function (resolve, reject) {
              var file = _fsPlus2.default.createWriteStream(target);
              var options = {
                url: source
              };
              if (proxy) {
                options.proxy = proxy;
              }
              _request2.default.get(options).on('error', function (err) {
                return reject(err);
              }).pipe(file);
              file.on('error', function (err) {
                return reject(err);
              });
              file.on('finish', function () {
                return resolve(target);
              });
            }));

          case 12:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this, [[1, 8]]);
  }));

  return function _download(_x4, _x5) {
    return _ref2.apply(this, arguments);
  };
}();

exports.extractTarGz = extractTarGz;
exports.PEPverToSemver = PEPverToSemver;

var _fsPlus = __webpack_require__(0);

var _fsPlus2 = _interopRequireDefault(_fsPlus);

var _request = __webpack_require__(5);

var _request2 = _interopRequireDefault(_request);

var _misc = __webpack_require__(3);

var _tar = __webpack_require__(19);

var _tar2 = _interopRequireDefault(_tar);

var _zlib = __webpack_require__(20);

var _zlib2 = _interopRequireDefault(_zlib);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; } /**
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * Copyright (c) 2017-present PlatformIO <contact@platformio.org>
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * All rights reserved.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * This source code is licensed under the license found in the LICENSE file in
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            * the root directory of this source tree.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                            */

function fileExistsAndSizeMatches(target, contentLength) {
  if (_fsPlus2.default.isFileSync(target)) {
    if (contentLength > 0 && contentLength == _fsPlus2.default.getSizeSync(target)) {
      return true;
    }
    try {
      _fsPlus2.default.removeSync(target);
    } catch (err) {
      console.error(err);
    }
  }
  return false;
}

function getContentLength(url) {
  return new Promise(function (resolve) {
    _request2.default.head({
      url: url
    }, function (err, response) {
      if (err || response.statusCode !== 200 || !response.headers.hasOwnProperty('content-length')) {
        resolve(-1);
      }
      resolve(parseInt(response.headers['content-length']));
    });
  });
}

function extractTarGz(source, destination) {
  return new Promise(function (resolve, reject) {
    _fsPlus2.default.createReadStream(source).pipe(_zlib2.default.createGunzip()).on('error', function (err) {
      return reject(err);
    }).pipe(_tar2.default.extract({
      cwd: destination
    })).on('error', function (err) {
      return reject(err);
    }).on('close', function () {
      return resolve(destination);
    });
  });
}

function PEPverToSemver(pepver) {
  return pepver.replace(/(\.\d+)\.?(dev|a|b|rc|post)/, '$1-$2.');
}

/***/ }),
/* 19 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_19__;

/***/ }),
/* 20 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_20__;

/***/ }),
/* 21 */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_21__;

/***/ })
/******/ ]);
});